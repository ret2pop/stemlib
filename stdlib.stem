#!/usr/local/bin/stem
# Author: Preston Pan

neg [ 0 swap - ] def

# andrei's loop function -- deprecated in favor of matthew's loop
#loop [
#  swap dup 0 > [
#    swap
#    dup eval
#    swap 1 - swap loop
#  ] [ dsc dsc ] if
#] def

swapd [ [ swap ] dip ] def
swapt [ [ [ swap ] dip ] dip ] def
swapq [ [ [ [ swap ] dip ] dip ] dip ] def


swap2 [ swapd swap ] def
swap3 [ swapt swapd swap ] def
swap4 [ swapq swapt swapd swap ] def

dscd [ swap dsc ] def
dsct [ swapd swap dsc ] def
dscq [ swapt swapd swap dsc ] def

dsc2 [ dsc dsc ] def
dsc3 [ dsc dsc dsc ] def

dupd [ [ dup ] dip ] def
dupt [ [ [ dup ] dip ] dip ] def
dupq [ [ [ [ dup ] dip ] dip ] dip ] def

over [ dupd swap ] def
over2 [ dupt swapd swap ] def
over3 [ dupq swapt swapd swap ] def

dup2 [ over over ] def
dup3 [ over2 over2 over2 ] def
dup4 [ over3 over3 over3 over3 ] def

dip2 [ swap [ dip ] dip ] def
dip3 [ swap [ dip ] dip ] def

keep [ over [ eval ] dip ] def

when [ [ ] if ] def
while [ dup2 [ when ] dip2 over [ while ] [ dsc2 ] if ] def

loop [ dup2 [ swap [ ] if ] dip2 dup [ 1 - loop ] [ dsc2 ] if ] def

dipn [ [ [ dip ] curry ] swap loop eval ] def
swapn [ [ swap ] swap dipn ] def
dupn [ [ dup ] swap dipn ] def
# d>base [ [ pow * "" swap ] keep2

# [ [ over ] [ [ dup2 / floor * swap over - ] keep [ [ "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "↊" "↋" ] vat swap + ] with dip2 ] while dsc2 dup len(str-len) ] dip
# - dup2 tail [ head "." ] dip + + ] def

factorial [ dup 0 <= [ 1 + ] [ dup 1 - factorial * ] if ] def
abs [ dup 0 < [ neg ] when ] def

PI 3.1415926 def
E 2.718281828 def

map [ [ ] over2 over2 len 0 swap
[ dup4 swap vat over2 eval dscd dscd quote compose swap 1 + dsct dsct dsct over3 swap over3 swap ]
swap loop dsc3 dscd dscd ] def

filter [ [ ] over2 over2 len 0 swap
[ dup4 swap vat dup over3 eval dsct dsct [ quote compose ] [ dsc ] if swap 1 + dsct dsct dsct over3 swap over3 swap ]
swap loop dsc3 dscd dscd ] def

# range: [starting value] [non-inclusive ending value] => [quote]
range [ [ ] over2 over2 - abs [ [ dsc ] dip ] dip [ over quote compose [ 1 + ] dip ] swap loop dscd ] def

# reduce: [accumulator] [quote] => value
reduce [ 0 swap vat [ len ] dip swap swapd 1 swap 1 -
[ dup4 swap vat dscd swap2 eval dscq swap swapd 1 + ]
swap loop dsc2 dscd ] def

# merge [ comparator ] [ list A ] [ list B ] => sorted list
# [ b a ] [ compar ] A B
merge [ [ ] swap swapd swapt
      [ len swapd [ len ] dip 0 > swap 0 > and ]
      [ uncurry swapd [ uncurry ] dip 4 dupn swap4 eval [ swap ] when 4 swapn 3 swapn swap3 curry curry swap swapd swapt ]
      while dsc3 ] def
# TODO: sort: [comparator] [quote] => [sorted quote]
sort [ len 1 > [ len 2 / floor 1 - cut dupt swapd sort dupt swap swapd sort dupt merge ] when dscd ] def
